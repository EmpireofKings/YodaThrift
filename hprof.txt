JAVA PROFILE 1.0.1, created Tue Feb 16 22:49:04 2016

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000189, id = 200001, name="main", group="main")
THREAD START (obj=50000de1, id = 200004, name="process reaper", group="system")
THREAD START (obj=500010a0, id = 200005, name="File lock request listener", group="main")
THREAD START (obj=50001b68, id = 200006, name="Run command '/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java'", group="main")
THREAD START (obj=50001b6b, id = 200007, name="DisconnectableInputStream source reader", group="main")
THREAD START (obj=50001b6f, id = 200008, name="Forward streams with process: command '/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java'", group="main")
THREAD START (obj=50001b70, id = 200009, name="Forward streams with process: command '/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java' Thread 2", group="main")
THREAD START (obj=50001b71, id = 200010, name="Forward streams with process: command '/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java' Thread 3", group="main")
THREAD START (obj=50001b73, id = 200012, name="SIGINT handler", group="system")
THREAD START (obj=50001b77, id = 200013, name="Thread-1", group="main")
THREAD START (obj=50001b78, id = 200014, name="gradle-shutdown-hook", group="main")
THREAD START (obj=50001b79, id = 200015, name="Thread-0", group="main")
THREAD END (id = 200015)
THREAD END (id = 200013)
THREAD END (id = 200014)
THREAD END (id = 200012)
TRACE 301426:
	java.io.FileInputStream.readBytes(FileInputStream.java:Unknown line)
	java.io.FileInputStream.read(FileInputStream.java:255)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
TRACE 300753:
	java.net.PlainDatagramSocketImpl.receive0(PlainDatagramSocketImpl.java:Unknown line)
	java.net.AbstractPlainDatagramSocketImpl.receive(AbstractPlainDatagramSocketImpl.java:144)
	java.net.DatagramSocket.receive(DatagramSocket.java:812)
	org.gradle.cache.internal.FileLockCommunicator.receive(FileLockCommunicator.java:60)
TRACE 301425:
	java.lang.UNIXProcess.waitForProcessExit(UNIXProcess.java:Unknown line)
	java.lang.UNIXProcess.lambda$initStreams$268(UNIXProcess.java:290)
	java.lang.UNIXProcess$$Lambda$7.1360541835.run(<Unknown Source>:Unknown line)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
TRACE 300082:
	java.lang.ClassLoader.defineClass1(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.defineClass(ClassLoader.java:760)
	java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	java.net.URLClassLoader.defineClass(URLClassLoader.java:467)
TRACE 301239:
	com.sun.tools.javac.comp.Attr$ResultInfo.check(Attr.java:476)
	com.sun.tools.javac.comp.Resolve$MethodResultInfo.check(Resolve.java:1010)
	com.sun.tools.javac.comp.Resolve$4.checkArg(Resolve.java:829)
	com.sun.tools.javac.comp.Resolve$AbstractMethodCheck.argumentsAcceptable(Resolve.java:734)
TRACE 301212:
	com.sun.tools.javac.comp.Resolve.rawInstantiate(Resolve.java:579)
	com.sun.tools.javac.comp.Resolve.selectBest(Resolve.java:1441)
	com.sun.tools.javac.comp.Resolve.findMethodInScope(Resolve.java:1628)
	com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1699)
TRACE 301238:
	com.sun.tools.javac.comp.Resolve$4.argumentsAcceptable(Resolve.java:838)
	com.sun.tools.javac.comp.Resolve.rawInstantiate(Resolve.java:579)
	com.sun.tools.javac.comp.Resolve.selectBest(Resolve.java:1441)
	com.sun.tools.javac.comp.Resolve.findMethodInScope(Resolve.java:1628)
TRACE 301241:
	com.sun.tools.javac.comp.Resolve.selectBest(Resolve.java:1445)
	com.sun.tools.javac.comp.Resolve.findMethodInScope(Resolve.java:1628)
	com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1699)
	com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1672)
TRACE 301082:
	java.util.zip.ZipFile.read(ZipFile.java:Unknown line)
	java.util.zip.ZipFile.access$1400(ZipFile.java:61)
	java.util.zip.ZipFile$ZipFileInputStream.read(ZipFile.java:717)
	sun.misc.Resource.getBytes(Resource.java:124)
TRACE 301109:
	java.io.FileInputStream.readBytes(FileInputStream.java:Unknown line)
	java.io.FileInputStream.read(FileInputStream.java:255)
	com.sun.tools.javac.util.BaseFileManager.makeByteBuffer(BaseFileManager.java:302)
	com.sun.tools.javac.file.RegularFileObject.getCharContent(RegularFileObject.java:114)
TRACE 300281:
	java.lang.Throwable.fillInStackTrace(Throwable.java:Unknown line)
	java.lang.Throwable.fillInStackTrace(Throwable.java:783)
	java.lang.Throwable.<init>(Throwable.java:287)
	java.lang.Exception.<init>(Exception.java:84)
TRACE 300495:
	java.util.zip.ZipFile.getEntry(ZipFile.java:Unknown line)
	java.util.zip.ZipFile.getEntry(ZipFile.java:311)
	java.util.jar.JarFile.getEntry(JarFile.java:240)
	java.util.jar.JarFile.getJarEntry(JarFile.java:223)
TRACE 301226:
	com.sun.tools.javac.code.Types$DescriptorCache.get(Types.java:389)
	com.sun.tools.javac.code.Types.findDescriptorSymbol(Types.java:557)
	com.sun.tools.javac.code.Types.isFunctionalInterface(Types.java:573)
	com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext.unrelatedFunctionalInterfaces(Resolve.java:1109)
TRACE 301221:
	com.sun.tools.javac.code.Types.findDescriptorSymbol(Types.java:557)
	com.sun.tools.javac.code.Types.isFunctionalInterface(Types.java:573)
	com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext.unrelatedFunctionalInterfaces(Resolve.java:1109)
	com.sun.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext.compatible(Resolve.java:1095)
TRACE 301217:
	com.sun.tools.javac.comp.Resolve.selectBest(Resolve.java:1441)
	com.sun.tools.javac.comp.Resolve.findMethodInScope(Resolve.java:1628)
	com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1699)
	com.sun.tools.javac.comp.Resolve.findMethod(Resolve.java:1672)
TRACE 301220:
	com.sun.tools.javac.comp.Resolve.rawInstantiate(Resolve.java:579)
	com.sun.tools.javac.comp.Resolve.instantiate(Resolve.java:624)
	com.sun.tools.javac.comp.Resolve.signatureMoreSpecific(Resolve.java:1560)
	com.sun.tools.javac.comp.Resolve.mostSpecific(Resolve.java:1489)
TRACE 301148:
	java.io.RandomAccessFile.readBytes(RandomAccessFile.java:Unknown line)
	java.io.RandomAccessFile.read(RandomAccessFile.java:377)
	java.io.RandomAccessFile.readFully(RandomAccessFile.java:436)
	java.io.RandomAccessFile.readFully(RandomAccessFile.java:416)
TRACE 301219:
	com.sun.tools.javac.comp.Resolve$AbstractMethodCheck.reportMC(Resolve.java:773)
	com.sun.tools.javac.comp.Resolve$4$2.report(Resolve.java:877)
	com.sun.tools.javac.comp.Check.checkType(Check.java:553)
	com.sun.tools.javac.comp.Attr$ResultInfo.check(Attr.java:476)
TRACE 301216:
	com.sun.tools.javac.comp.Resolve$AbstractMethodCheck.argumentsAcceptable(Resolve.java:734)
	com.sun.tools.javac.comp.Resolve$4.argumentsAcceptable(Resolve.java:838)
	com.sun.tools.javac.comp.Resolve.rawInstantiate(Resolve.java:579)
	com.sun.tools.javac.comp.Resolve.selectBest(Resolve.java:1441)
TRACE 300522:
	java.lang.ClassLoader.loadClass(ClassLoader.java:436)
	java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	java.lang.ClassLoader.loadClass(ClassLoader.java:357)
TRACE 300900:
	java.lang.Throwable.fillInStackTrace(Throwable.java:Unknown line)
	java.lang.Throwable.fillInStackTrace(Throwable.java:783)
	java.lang.Throwable.<init>(Throwable.java:265)
	java.lang.Exception.<init>(Exception.java:66)
TRACE 301152:
	java.io.RandomAccessFile.readBytes(RandomAccessFile.java:Unknown line)
	java.io.RandomAccessFile.read(RandomAccessFile.java:377)
	java.io.RandomAccessFile.readFully(RandomAccessFile.java:436)
	com.sun.tools.javac.file.ZipFileIndex.readBytes(ZipFileIndex.java:382)
TRACE 301215:
	com.sun.tools.javac.comp.Resolve$4.checkArg(Resolve.java:829)
	com.sun.tools.javac.comp.Resolve$AbstractMethodCheck.argumentsAcceptable(Resolve.java:734)
	com.sun.tools.javac.comp.Resolve$4.argumentsAcceptable(Resolve.java:838)
	com.sun.tools.javac.comp.Resolve.rawInstantiate(Resolve.java:579)
TRACE 301240:
	com.sun.tools.javac.comp.Attr$ResultInfo.check(Attr.java:476)
	com.sun.tools.javac.comp.Resolve$MostSpecificCheck.argumentsAcceptable(Resolve.java:1063)
	com.sun.tools.javac.comp.Resolve.rawInstantiate(Resolve.java:579)
	com.sun.tools.javac.comp.Resolve.instantiate(Resolve.java:624)
TRACE 300099:
	java.util.zip.Inflater.inflateBytes(Inflater.java:Unknown line)
	java.util.zip.Inflater.inflate(Inflater.java:259)
	java.util.zip.InflaterInputStream.read(InflaterInputStream.java:152)
	sun.misc.Resource.getBytes(Resource.java:124)
CPU SAMPLES BEGIN (total = 63535) Tue Feb 16 22:51:41 2016
rank   self  accum   count trace method
   1 57.52% 57.52%   36545 301426 java.io.FileInputStream.readBytes
   2 21.08% 78.60%   13393 300753 java.net.PlainDatagramSocketImpl.receive0
   3 19.18% 97.78%   12189 301425 java.lang.UNIXProcess.waitForProcessExit
   4  0.15% 97.93%      94 300082 java.lang.ClassLoader.defineClass1
   5  0.14% 98.08%      91 301239 com.sun.tools.javac.comp.Attr$ResultInfo.check
   6  0.09% 98.17%      58 301212 com.sun.tools.javac.comp.Resolve.rawInstantiate
   7  0.09% 98.25%      56 301238 com.sun.tools.javac.comp.Resolve$4.argumentsAcceptable
   8  0.09% 98.34%      56 301241 com.sun.tools.javac.comp.Resolve.selectBest
   9  0.07% 98.42%      46 301082 java.util.zip.ZipFile.read
  10  0.06% 98.47%      37 301109 java.io.FileInputStream.readBytes
  11  0.05% 98.52%      30 300281 java.lang.Throwable.fillInStackTrace
  12  0.04% 98.56%      25 300495 java.util.zip.ZipFile.getEntry
  13  0.03% 98.59%      18 301226 com.sun.tools.javac.code.Types$DescriptorCache.get
  14  0.03% 98.61%      17 301221 com.sun.tools.javac.code.Types.findDescriptorSymbol
  15  0.02% 98.64%      13 301217 com.sun.tools.javac.comp.Resolve.selectBest
  16  0.02% 98.65%      12 301220 com.sun.tools.javac.comp.Resolve.rawInstantiate
  17  0.02% 98.67%      11 301148 java.io.RandomAccessFile.readBytes
  18  0.02% 98.69%      11 301219 com.sun.tools.javac.comp.Resolve$AbstractMethodCheck.reportMC
  19  0.02% 98.70%      10 301216 com.sun.tools.javac.comp.Resolve$AbstractMethodCheck.argumentsAcceptable
  20  0.02% 98.72%      10 300522 java.lang.ClassLoader.loadClass
  21  0.02% 98.74%      10 300900 java.lang.Throwable.fillInStackTrace
  22  0.01% 98.75%       8 301152 java.io.RandomAccessFile.readBytes
  23  0.01% 98.76%       7 301215 com.sun.tools.javac.comp.Resolve$4.checkArg
  24  0.01% 98.77%       7 301240 com.sun.tools.javac.comp.Attr$ResultInfo.check
  25  0.01% 98.78%       7 300099 java.util.zip.Inflater.inflateBytes
CPU SAMPLES END
